---
// Import necessary components
import Image from 'astro/components/Image.astro'
import ChevronDownIcon from '../components/icons/ChevronDownIcon.astro'

interface MenuItem {
	label: string
	href?: string
	disabled: boolean
	dropdown?: MenuItem[]
}

// Menu items
const menuItems: MenuItem[] = [
	{ label: 'Inicio', href: '/home/inicio', disabled: false },
	{
		label: 'Nosotros',
		disabled: false,
		dropdown: [
			{
				label: 'Acerca de nosotros',
				href: '/about-us/nosotros',
				disabled: false,
			},
		],
	},
	{
		label: 'Préstamos',
		disabled: false,
		dropdown: [
			{ label: 'Personales', href: '/home/prestamos', disabled: false },
			{ label: 'Comerciales (Próximamente)', href: '/', disabled: true },
			{ label: 'Hipotecarios (Próximamente)', href: '/', disabled: true },
		],
	},
	{ label: 'Contactos', href: '/home/contactos', disabled: false },
]
---

<div class="fixed inset-x-0 top-0 z-50 mx-4 mt-4">
	<header class="bg-white/80 backdrop-blur-md shadow-md rounded-full">
		<nav
			class="flex items-center justify-between p-4 lg:px-8"
			aria-label="Global">
			<!-- Logo -->
			<div class="flex lg:flex-1">
				<a
					href="/"
					class="-m-1.5 p-1.5">
					<span class="sr-only">Your Company</span>
					<Image
						src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600"
						alt="Logo"
						height={32}
						width={32}
					/>
				</a>
			</div>

			<!-- Mobile menu button -->
			<div class="flex lg:hidden">
				<button
					type="button"
					id="mobile-menu-button"
					class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700">
					<span class="sr-only">Open main menu</span>
					<svg
						class="size-6"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						aria-hidden="true"
						data-slot="icon">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
						></path>
					</svg>
				</button>
			</div>

			<!-- Desktop menu -->
			<div class="hidden lg:flex lg:gap-x-12">
				{
					menuItems.map((item) =>
						'href' in item ? (
							<a
								href={item.href}
								class={`text-sm font-semibold text-gray-900 hover:text-blue-600 ${
									item.disabled ? 'opacity-50 pointer-events-none' : ''
								}`}>
								{item.label}
							</a>
						) : (
							<div class="relative">
								<button
									type="button"
									class="text-sm font-semibold text-gray-900 flex items-center dropdown-button"
									data-dropdown={`dropdown-${item.label.toLowerCase()}`}>
									{item.label}
									<ChevronDownIcon />
								</button>
								<div
									id={`dropdown-${item.label.toLowerCase()}`}
									class="hidden absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white ring-1 shadow-lg ring-black/5"
									role="menu"
									aria-orientation="vertical"
									tabindex="-1">
									<div
										class="py-1"
										role="none">
										{item.dropdown?.map((subItem) => (
											<a
												href={subItem.href}
												class={`block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 ${
													subItem.disabled
														? 'opacity-50 pointer-events-none'
														: ''
												}`}>
												{subItem.label}
											</a>
										))}
									</div>
								</div>
							</div>
						),
					)
				}
			</div>
		</nav>
	</header>

	<!-- Mobile menu backdrop -->
	<div
		id="mobile-menu-backdrop"
		class="hidden lg:hidden fixed inset-0 z-50 bg-gray-900/50">
	</div>

	<!-- Mobile menu -->
	<div
		id="mobile-menu"
		class="hidden lg:hidden fixed inset-y-0 right-0 z-50 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10">
		<div class="flex items-center justify-between">
			<a
				href="#"
				class="-m-1.5 p-1.5">
				<span class="sr-only">Your Company</span>
				<img
					class="h-8 w-auto"
					src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600"
					alt=""
				/>
			</a>
			<button
				type="button"
				id="mobile-menu-close"
				class="-m-2.5 rounded-md p-2.5 text-gray-700">
				<span class="sr-only">Close menu</span>
				<svg
					class="size-6"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					aria-hidden="true"
					data-slot="icon">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="M6 18 18 6M6 6l12 12"
					></path>
				</svg>
			</button>
		</div>
		<div class="mt-6 flow-root">
			<div class="-my-6 divide-y divide-gray-500/10">
				<div class="space-y-2 py-6">
					{
						menuItems.map((item) =>
							'href' in item ? (
								<a
									href={item.href}
									class={`text-sm font-semibold text-gray-900 hover:text-blue-600 ${
										item.disabled ? 'opacity-50 pointer-events-none' : ''
									}`}>
									{item.label}
								</a>
							) : (
								<div class="space-y-1">
									<button
										type="button"
										class="-mx-3 w-full flex items-center justify-between rounded-lg px-3 py-2 text-base/7 font-semibold text-gray-900 hover:bg-gray-50 mobile-dropdown-button"
										data-mobile-dropdown={`mobile-dropdown-${item.label.toLowerCase()}`}>
										{item.label}
										<ChevronDownIcon />
									</button>
									<div
										id={`mobile-dropdown-${item.label.toLowerCase()}`}
										class="hidden">
										{item.dropdown?.map((subItem) => (
											<a
												href={subItem.href}
												class={`block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 ${
													subItem.disabled
														? 'opacity-50 pointer-events-none'
														: ''
												}`}>
												{subItem.label}
											</a>
										))}
									</div>
								</div>
							),
						)
					}
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	// Mobile menu functionality
	const mobileMenuButton = document.getElementById(
		'mobile-menu-button',
	) as HTMLButtonElement
	const mobileMenuClose = document.getElementById(
		'mobile-menu-close',
	) as HTMLButtonElement
	const mobileMenu = document.getElementById('mobile-menu') as HTMLDivElement
	const mobileMenuBackdrop = document.getElementById(
		'mobile-menu-backdrop',
	) as HTMLDivElement

	function openMobileMenu() {
		mobileMenu.classList.remove('hidden')
		mobileMenuBackdrop.classList.remove('hidden')
		document.body.style.overflow = 'hidden'
	}

	function closeMobileMenu() {
		mobileMenu.classList.add('hidden')
		mobileMenuBackdrop.classList.add('hidden')
		document.body.style.overflow = ''
	}

	mobileMenuButton.addEventListener('click', openMobileMenu)
	mobileMenuClose.addEventListener('click', closeMobileMenu)
	mobileMenuBackdrop.addEventListener('click', closeMobileMenu)

	// Desktop dropdown menu functionality
	const dropdownButtons = document.querySelectorAll('.dropdown-button')
	const dropdownStates = new Map<string, boolean>()

	dropdownButtons.forEach((button) => {
		const dropdownId = button.getAttribute('data-dropdown')
		if (!dropdownId) return

		dropdownStates.set(dropdownId, false)

		button.addEventListener('click', () => {
			const dropdown = document.getElementById(dropdownId)
			if (!dropdown) return

			const isOpen = !dropdownStates.get(dropdownId)
			dropdownStates.set(dropdownId, isOpen)

			if (isOpen) {
				dropdown.classList.remove('hidden')
				// Close other dropdowns
				dropdownButtons.forEach((otherButton) => {
					const otherId = otherButton.getAttribute('data-dropdown')
					if (otherId && otherId !== dropdownId) {
						const otherDropdown = document.getElementById(otherId)
						if (otherDropdown) {
							otherDropdown.classList.add('hidden')
							dropdownStates.set(otherId, false)
						}
					}
				})
			} else {
				dropdown.classList.add('hidden')
			}
		})
	})

	// Mobile dropdown menu functionality
	const mobileDropdownButtons = document.querySelectorAll(
		'.mobile-dropdown-button',
	)
	const mobileDropdownStates = new Map<string, boolean>()

	mobileDropdownButtons.forEach((button) => {
		const dropdownId = button.getAttribute('data-mobile-dropdown')
		if (!dropdownId) return

		mobileDropdownStates.set(dropdownId, false)

		button.addEventListener('click', () => {
			const dropdown = document.getElementById(dropdownId)
			const arrow = button.querySelector('svg')
			if (!dropdown || !arrow) return

			const isOpen = !mobileDropdownStates.get(dropdownId)
			mobileDropdownStates.set(dropdownId, isOpen)

			if (isOpen) {
				dropdown.classList.remove('hidden')
				arrow.style.transform = 'rotate(180deg)'
			} else {
				dropdown.classList.add('hidden')
				arrow.style.transform = 'rotate(0)'
			}
		})
	})

	// Close desktop dropdowns when clicking outside
	document.addEventListener('click', (event) => {
		const target = event.target as Node
		dropdownButtons.forEach((button) => {
			const dropdownId = button.getAttribute('data-dropdown')
			if (!dropdownId) return

			const dropdown = document.getElementById(dropdownId)
			if (!dropdown) return

			if (!button.contains(target) && !dropdown.contains(target)) {
				dropdown.classList.add('hidden')
				dropdownStates.set(dropdownId, false)
			}
		})
	})

	// Close dropdowns when pressing Escape
	document.addEventListener('keydown', (event) => {
		if (event.key === 'Escape') {
			closeMobileMenu()

			// Close desktop dropdowns
			dropdownButtons.forEach((button) => {
				const dropdownId = button.getAttribute('data-dropdown')
				if (!dropdownId) return

				const dropdown = document.getElementById(dropdownId)
				if (!dropdown) return

				dropdown.classList.add('hidden')
				dropdownStates.set(dropdownId, false)
			})

			// Close mobile dropdowns
			mobileDropdownButtons.forEach((button) => {
				const dropdownId = button.getAttribute('data-mobile-dropdown')
				if (!dropdownId) return

				const dropdown = document.getElementById(dropdownId)
				const arrow = button.querySelector('svg')
				if (!dropdown || !arrow) return

				dropdown.classList.add('hidden')
				arrow.style.transform = 'rotate(0)'
				mobileDropdownStates.set(dropdownId, false)
			})
		}
	})

	// Array of base pages to check
	const pages: string[] = ['home', 'about-us']

	// Function to handle navigation dynamically
	function handleNavigation(event: Event): void {
		const link = (event.target as HTMLElement).closest('a') // Ensure the clicked element is a link
		if (!link) return

		const href = link.getAttribute('href')
		if (!href) return

		// Extract the page and anchor from the href
		const pathParts = href.split('/')
		const page = pathParts[1] // Get the base page name (e.g., "home" or "about-us")
		const anchor = pathParts[2] // Get the section name (e.g., "nosotros")

		// Check if the base page is in the allowed pages array
		if (pages.includes(page)) {
			event.preventDefault() // Prevent default navigation

			// Get the current page from the URL
			const currentPage = window.location.pathname.split('/')[1]

			if (currentPage === page) {
				// If already on the same page, scroll to the anchor
				if (anchor) {
					scrollToSection(anchor)
				}
			} else {
				// If navigating to a different page, store the anchor in localStorage
				if (anchor) {
					localStorage.setItem('scrollToSection', anchor)
				}

				// Redirect to the base page
				window.location.href = `/${page}`
			}
		}
	}

	// Function to scroll to the section
	function scrollToSection(section: string | null): void {
		if (section) {
			const targetElement = document.querySelector(`#${section}`)
			if (targetElement) {
				targetElement.scrollIntoView({ behavior: 'smooth' })
			}
		}
	}

	// Function to scroll to the section after the page loads
	function scrollToSectionOnLoad(): void {
		const section = localStorage.getItem('scrollToSection')
		if (section) {
			scrollToSection(section)
			// Clear the stored section after scrolling
			localStorage.removeItem('scrollToSection')
		}
	}

	// Attach event listener to all links
	document.addEventListener('DOMContentLoaded', () => {
		const links = document.querySelectorAll<HTMLAnchorElement>('a')
		links.forEach((link) => {
			link.addEventListener('click', handleNavigation)
		})

		// Scroll to the section if applicable
		scrollToSectionOnLoad()
	})
</script>
