---
import Image from 'astro/components/Image.astro'
import ChevronDownIcon from '../components/icons/ChevronDownIcon.astro'

const menuItems = [
	{ label: 'Inicio', href: '/home/#inicio', disabled: false },
	{
		label: 'Nosotros',
		disabled: false,
		dropdown: [
			{
				label: 'Acerca de nosotros',
				href: '/about-us/#nosotros',
				disabled: false,
			},
		],
	},
	{
		label: 'Préstamos',
		disabled: false,
		dropdown: [
			{ label: 'Personales', href: '#', disabled: false },
			{ label: 'Comerciales (pronto)', href: '#', disabled: true },
			{ label: 'Hipotecarios (pronto)', href: '#', disabled: true },
		],
	},
	{ label: 'Contactos', href: '/home/#contactos', disabled: false },
]
---

<header class="fixed inset-x-0 top-0 z-50 bg-white shadow-md">
	<nav
		class="flex items-center justify-between p-6 lg:px-8"
		aria-label="Global">
		<!-- Logo -->
		<div class="flex lg:flex-1">
			<a
				href="#inicio"
				class="-m-1.5 p-1.5">
				<span class="sr-only">Rumar Crédito</span>
				<Image
					src={'https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600'}
					alt="Logo"
					height={32}
					width={32}
				/>
			</a>
		</div>

		<!-- Mobile Menu Button -->
		<div class="flex lg:hidden">
			<button
				id="mobile-menu-button"
				type="button"
				class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700">
				<span class="sr-only">Open main menu</span>
				<svg
					class="h-6 w-6"
					fill="none"
					viewBox="0 0 24 24"
					stroke-width="1.5"
					stroke="currentColor"
					aria-hidden="true">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
					></path>
				</svg>
			</button>
		</div>

		<!-- Mobile Menu -->
		<div
			id="mobile-menu"
			class="hidden lg:hidden fixed inset-0 z-50 bg-white p-6 overflow-y-auto">
			<div class="flex items-center justify-between">
				<a
					href="#inicio"
					class="-m-1.5 p-1.5">
					<span class="sr-only">Rumar Crédito</span>
					<img
						class="h-8 w-auto"
						src="https://tailwindcss.com/plus-assets/img/logos/mark.svg?color=indigo&shade=600"
						alt="Logo"
					/>
				</a>
				<button
					id="close-mobile-menu-button"
					type="button"
					class="-m-2.5 rounded-md p-2.5 text-gray-700">
					<span class="sr-only">Close menu</span>
					<svg
						class="h-6 w-6"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="1.5"
						stroke="currentColor"
						aria-hidden="true">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							d="M6 18L18 6M6 6l12 12"
						></path>
					</svg>
				</button>
			</div>
			<div class="mt-6 space-y-6">
				{
					menuItems.map((item) =>
						item.dropdown ? (
							<div>
								<p class="text-sm font-semibold text-gray-900">{item.label}</p>
								<div class="ml-4 space-y-1">
									{item.dropdown.map((subItem) => (
										<a
											href={subItem.href}
											class={`block text-sm text-gray-700 hover:bg-gray-100 ${
												subItem.disabled ? 'opacity-50 pointer-events-none' : ''
											}`}>
											{subItem.label}
										</a>
									))}
								</div>
							</div>
						) : (
							<a
								href={item.href}
								class={`block text-sm font-semibold text-gray-900 hover:bg-gray-50 ${
									item.disabled ? 'opacity-50 pointer-events-none' : ''
								}`}>
								{item.label}
							</a>
						),
					)
				}
			</div>
		</div>

		<!-- Desktop Menu -->
		<div class="hidden lg:flex lg:gap-x-12">
			{
				menuItems.map((item) =>
					item.dropdown ? (
						<div
							class="relative group"
							id={`dropdown-${item.label}`}>
							<button
								class="text-sm font-semibold text-gray-900 flex items-center hover:text-blue-600 dropdown-button"
								data-label={item.label}>
								{item.label}
								<ChevronDownIcon />
							</button>
							<div
								id={`dropdown-menu-${item.label}`}
								class="absolute right-0 mt-2 hidden w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black/5">
								<div class="py-1">
									{item.dropdown.map((subItem) => (
										<a
											href={subItem.href}
											class={`block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 ${
												subItem.disabled ? 'opacity-50 pointer-events-none' : ''
											}`}>
											{subItem.label}
										</a>
									))}
								</div>
							</div>
						</div>
					) : (
						<a
							href={item.href}
							class={`text-sm font-semibold text-gray-900 hover:text-blue-600 ${
								item.disabled ? 'opacity-50 pointer-events-none' : ''
							}`}>
							{item.label}
						</a>
					),
				)
			}
		</div>
	</nav>
</header>
<script>
	const toggleMobileMenu = () => {
		const mobileMenu = document.getElementById('mobile-menu')
		if (mobileMenu) {
			mobileMenu.classList.toggle('hidden')
		}
	}

	const mobileMenuButton = document.getElementById('mobile-menu-button')
	if (mobileMenuButton) {
		mobileMenuButton.addEventListener('click', toggleMobileMenu)
	}

	const closeMobileMenuButton = document.getElementById(
		'close-mobile-menu-button',
	)
	if (closeMobileMenuButton) {
		closeMobileMenuButton.addEventListener('click', toggleMobileMenu)
	}

	function toggleDropdown(label: string): void {
		const dropdownMenu = document.getElementById(`dropdown-menu-${label}`)
		if (!dropdownMenu) return

		const isHidden = dropdownMenu.classList.contains('hidden')

		// Close all dropdowns
		document.querySelectorAll('[id^="dropdown-menu-"]').forEach((menu) => {
			menu.classList.add('hidden')
		})

		// Toggle the clicked dropdown
		if (isHidden) {
			dropdownMenu.classList.remove('hidden')
		}
	}

	// Attach event listeners to dropdown buttons
	document.addEventListener('DOMContentLoaded', () => {
		const dropdownButtons = document.querySelectorAll('.dropdown-button')
		dropdownButtons.forEach((button) => {
			button.addEventListener('click', (event) => {
				event.stopPropagation() // Prevent the click from propagating to the document
				const label = (button as HTMLElement).getAttribute('data-label')
				if (label) {
					toggleDropdown(label)
				}
			})
		})
	})

	// Close dropdown when clicking outside
	document.addEventListener('click', () => {
		document.querySelectorAll('[id^="dropdown-menu-"]').forEach((menu) => {
			menu.classList.add('hidden')
		})
	})

	// Function to handle in-page navigation
	function handleInPageNavigation(event: Event, href: string): void {
		if (href.startsWith('#')) {
			event.preventDefault()
			const targetElement = document.querySelector(href)
			if (targetElement) {
				targetElement.scrollIntoView({ behavior: 'smooth' })
			}
		}
	}

	// Attach event listeners to menu items
	document.addEventListener('DOMContentLoaded', () => {
		const menuLinks = document.querySelectorAll('a[href^="#"]')
		menuLinks.forEach((link) => {
			link.addEventListener('click', (event) => {
				const href = (link as HTMLAnchorElement).getAttribute('href')
				if (href) {
					handleInPageNavigation(event, href)
				}
			})
		})
	})
</script>
